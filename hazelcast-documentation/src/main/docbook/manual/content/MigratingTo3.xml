<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="MigratingTo3" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
      http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Upgrading from 2.x versions</title>
    <para>
        In this section, we list the changes what users should take into account before upgrading to Hazelcast 3.0 from
        earlier versions of Hazelcast.
    </para>
    <para>
        <itemizedlist>
            <listitem>
                <emphasis role="bold">Removal of deprecated static methods:</emphasis>
                <para>
                    The static methods of Hazelcast class reaching hazelcast data components have been removed.
                    The functionality of these methods can be reached from HazelcastInstance interface.
                    Namely you should replace following:
                    <programlisting language="java"><![CDATA[
Map<Integer, String> mapCustomers = Hazelcast.getMap("customers");]]></programlisting>
                    with
                    <programlisting language="java"><![CDATA[
HazelcastInstance instance = Hazelcast.newHazelcastInstance(cfg);
// or if you already started an instance
// HazelcastInstance instance = Hazelcast.getHazelcastInstanceByName("instance1");
Map<Integer, String> mapCustomers = instance.getMap("customers");]]></programlisting>
                </para>
            </listitem>
            <listitem>
                <emphasis role="bold">Removal of lite members:</emphasis>
                <para>
                    With 3.0 there will be no member type as lite member.
                    As 3.0 clients are smart client that they know in which node the data is located, you can replace
                    your lite members with native clients.
                </para>
            </listitem>
            <listitem>
                <emphasis role="bold">Renaming "instance" to "distributed object":</emphasis>
                <para>
                    Before 3.0 there was a confusion for the term "instance".
                    It was used for both the cluster members and the distributed objects (map, queue, topic etc.
                    instances).
                    Starting 3.0, the term instance will be only used for hazelcast instances, namely cluster members.
                    We will use the term "distributed object" for map, queue etc. instances.
                    So you should replace the related methods with the new renamed ones:
                    As 3.0 clients are smart client that they know in which node the data is located, you can replace
                    your lite members with native clients.
                    <programlisting language="java"><![CDATA[
public static void main(String[] args) throws InterruptedException {
    Config cfg = new Config();
    HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);
    IMap map = hz.getMap("test");
    Collection<Instance> instances = hz.getInstances();
    for (Instance instance : instances) {
        if(instance.getInstanceType() == Instance.InstanceType.MAP) {
        System.out.println("there is a map with name:"+instance.getId());
        }
    }
}
    ]]></programlisting>
                    with
                    <programlisting language="java"><![CDATA[
public static void main(String[] args) throws InterruptedException {
    Config cfg = new Config();
    HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);
    IMap map = hz.getMap("test");
    Collection<DistributedObject> distributedObjects = hz.getDistributedObjects();
        for (DistributedObject distributedObject : distributedObjects) {
            if(distributedObject instanceof IMap)
            System.out.println("there is a map with name:"+distributedObject.getName());
        }
}
                            ]]></programlisting>

                </para>
            </listitem>

            <listitem>
                <emphasis role="bold">Package structure change:</emphasis>
                <para>
                    PartitionService has been moved to package "com.hazelcast.core" from "com.hazelcast.partition"
                </para>
            </listitem>

            <listitem>
                <emphasis role="bold">Listener API change:</emphasis>
                <para>
                    Before 3.0, you can removeListener methods was taking the Listener object as parameter.
                    But it causes confusion as same listener object may be used as parameter for different listener
                    registrations.
                    So we have changed the listener API. Anymore, addListener methods return you an unique id and you
                    can remove listener by using this id.
                    So you should do following replacement if needed:
                    <programlisting language="java"><![CDATA[
IMap map = instance.getMap("map");
map.addEntryListener(listener,true);
map.removeEntryListener(listener);
    ]]></programlisting>
                    with
                    <programlisting language="java"><![CDATA[
IMap map = instance.getMap("map");
String listenerId = map.addEntryListener(listener, true);
map.removeEntryListener(listenerId);
    ]]></programlisting>
                </para>
            </listitem>

            <listitem>
                <emphasis role="bold">IMap changes:</emphasis>
                <itemizedlist>
                    <listitem>
                        <para>
                            tryRemove(K key, long timeout, TimeUnit timeunit) returns boolean indicating whether
                            operation is successful.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            tryLockAndGet(K key, long time, TimeUnit timeunit) is removed.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            putAndUnlock(K key, V value) is removed.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            lockMap(long time, TimeUnit timeunit) and unlockMap() are removed
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            getMapEntry(K key) is renamed as getEntryView(K key). The returned object's type, MapEntry
                            class is renamed as EntryView.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                           There is no predefined names for merge policies. You just give the full class name of the merge policy implementation.
                            <programlisting language="java"><![CDATA[
<merge-policy>com.hazelcast.map.merge.PassThroughMergePolicy</merge-policy>
    ]]></programlisting>
                        </para>
                        Also MergePolicy interface has been renamed to MapMergePolicy and also returning null from the implemented merge() method causes the existing entry to be removed.
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <emphasis role="bold">IQueue changes:</emphasis>
                <para>There is no change on IQueue API but there are changes on how IQueue is configured. With Hazelcast
                    3.0 there will not be backing map configuration for queue.
                    Settings like backup count will be directly configured on queue config.
                    For queue configuration details, see
                    <link xlink:href="#Queue"> Distributed Queue </link>
                    page.
                </para>
            </listitem>
            <listitem>
                <emphasis role="bold">Transaction API change:</emphasis>
                <para>In Hazelcast 3.0, transaction API is completely different. See transactions part for the new API:
                    <link xlink:href="#Transactions"> Distributed Transactions </link>
                </para>
            </listitem>
            <listitem>
                <emphasis role="bold">ExecutorService API change:</emphasis>
                <para>Classes MultiTask and DistributedTask have been removed. All the functionality is supported by the newly presented interface IExecutorService.
                    See distributed execution part for detailed usage example:
                    <link xlink:href="#DistributedExecution"> Distributed Execution </link>
                </para>
            </listitem>
            <listitem>
                LifeCycleService API has been simplified. pause(), resume(), restart() methods have been removed.
            </listitem>
            <listitem>
                AtomicNumber class has been renamed to IAtomicLong.
            </listitem>
            <listitem>
                ICountDownLatch await() operation has been removed. We expect users to use await method with timeout parameters.
            </listitem>
            <listitem>
                ISemaphore API has been substantially changed. attach(), detach() methods have been removed.
            </listitem>
        </itemizedlist>
    </para>
</sect1>
