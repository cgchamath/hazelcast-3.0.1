<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="TransactionInterface" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
       http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">
    <title>Transaction Interface</title>
    <para>
        Hazelcast can be used in transactional context. Basically create a <literal>TransactionContext</literal>
        which can be used to begin, commit, rollback transaction.
        Obtain transaction aware instances of queues, maps, sets, lists, multimaps via <literal>TransactionContext</literal>,
        work with them and commit/rollback in one shot. Hazelcast supports LOCAL(One Phase) and TWO_PHASE transactions.
        Default behaviour is TWO_PHASE.
    </para>
    <para>

        <programlisting language="java"><![CDATA[import java.util.Queue;
import java.util.Map;
import java.util.Set;
import com.hazelcast.core.Hazelcast;
import com.hazelcast.core.Transaction; 

Config cfg = new Config();
HazelcastInstance hz = Hazelcast.newHazelcastInstance(cfg);

TransactionOptions options = new TransactionOptions().setTransactionType(TransactionType.LOCAL);
TransactionContext context = hz.newTransactionContext()
context.beginTransaction();

TransactionalQueue queue = context.getQueue("myqueue");
TransactionalMap map     = context.getMap  ("mymap");
TransactionalSet set     = context.getSet  ("myset");

try {
    Object obj = queue.poll();
    //process obj
    map.put ("1", "value1");
    set.add ("value");
    //do other things..
    context.commitTransaction();
}catch (Throwable t)  {
    context.rollbackTransaction();
}
]]></programlisting>

        Isolation is always
        <literal>REPEATABLE_READ</literal>
        . If you are in a transaction, you can read the data in your transaction and the data that is already committed
        and if not in a transaction, you can only read the committed data. Implementation is different for queue and
        map/set. For queue operations (offer,poll), offered and/or polled objects are copied to the owner member in order
        to safely commit/rollback. For map/set, Hazelcast first acquires the locks for the write operations (put,
        remove) and holds the differences (what is added/removed/updated) locally for each transaction. When transaction
        is set to commit, Hazelcast will release the locks and apply the differences. When rolling back, Hazelcast will
        simply releases the locks and discard the differences.
    </para>
</sect1>
