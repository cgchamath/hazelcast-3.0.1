<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<sect1 xml:id="CustomSerialization" version='5.0' xmlns='http://docbook.org/ns/docbook'
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
    <title>Custom Serialization</title>
    <para>
        Hazelcast lets you to plug a custom serializer to be used for serialization of objects.
    </para>
    Let's say you have a class
    <literal>Foo</literal>
    and you would like to customize the serialization.
    The reasons could be
    <literal>Foo</literal>
    is not Serializable or you are not happy with the default serialization.

    <programlisting language="java"><![CDATA[
public class Foo {
    private String foo;
    public String getFoo() {
        return foo;
    }
    public void setFoo(String foo) {
        this.foo = foo;
    }
}
            ]]></programlisting>

    Let's say our custom serialization will serialize
    <literal>Foo</literal>
    into XML. First we need to implement a
    <literal>com.hazelcast.nio.serialization.StreamSerializer</literal>.
    A very simple one that uses XMLEncoder and XMLDecoder, would look like the following:

    <programlisting language="java"><![CDATA[
public static class FooXmlSerializer implements StreamSerializer<Foo> {

    @Override
    public int getTypeId() {
        return 10;
    }

    @Override
    public void write(ObjectDataOutput out, Foo object) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        XMLEncoder encoder = new XMLEncoder(bos);
        encoder.writeObject(object);
        encoder.close();
        out.write(bos.toByteArray());
    }

    @Override
    public Foo read(ObjectDataInput in) throws IOException {
        final InputStream inputStream = (InputStream) in;
        XMLDecoder decoder = new XMLDecoder(inputStream);
        return (Foo) decoder.readObject();
    }

    @Override
    public void destroy() {
    }
}

            ]]></programlisting>

    Note that the
    <literal>typeId</literal>
    must be unique as Hazelcast will use it to lookup the StreamSerializer while
    it de-serializes the object. Now the last required step is to register the StreamSerializer to the Configuration

    <para>Programmatic Configuration</para>

    <programlisting language="java"><![CDATA[
SerializerConfig sc = new SerializerConfig().
        setImplementation(new FooXmlSerializer()).
        setTypeClass(Foo.class);
Config config = new Config();
config.getSerializationConfig().addSerializerConfig(sc);
            ]]></programlisting>

    <para>XML Configuration</para>

    <programlisting language="java"><![CDATA[
<hazelcast>
    <serialization>
        <serializers>
            <serializer type-class="com.www.Foo">com.www.FooXmlSerializer</serializer>
        </serializers>
    </serialization>
</hazelcast>
    ]]></programlisting>
    
    From now on, Hazelcast will use <literal>FooXmlSerializer</literal> to serialize Foo objects. 
    This way one can write an adapter (<literal>StreamSerializer</literal>) for any Serialization framework
    and plug it into Hazelcast.

</sect1>
