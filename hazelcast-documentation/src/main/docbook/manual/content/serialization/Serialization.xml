<?xml version='1.0' encoding='UTF-8'?>
<!--
  ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<para version="5.0" xmlns="http://docbook.org/ns/docbook"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
      xmlns:xlink="http://www.w3.org/1999/xlink"
        >

    <para>All your distributed objects such as your key and value objects, objects you offer into
        distributed queue and your distributed callable/runnable objects have to
        be<literal>Serializable</literal>.
    </para>
    <para>Hazelcast serializes all your objects into an instance
        of<literal>com.hazelcast.nio.serialization.Data</literal>.
        <literal>Data</literal>
        is the binary
        representation of an object.

        When Hazelcast serializes an object into<literal>Data</literal>,
        it first checks whether the object is an instance of
        <literal>com.hazelcast.nio.serialization.DataSerializable</literal>, if not it checks if it is an instance of
        <literal>com.hazelcast.nio.serialization.Portable</literal>
        and serializes it accordingly.

        For the following types Hazelcast optimizes the serialization a user can not override this behaviour.


        <literal>Byte</literal>,
        <literal>Boolean</literal>,
        <literal>Character</literal>,
        <literal>Short</literal>,
        <literal>Integer</literal>,
        <literal>Long</literal>,
        <literal>Float</literal>,
        <literal>Double</literal>,
        <literal>byte[]</literal>,
        <literal>char[]</literal>,
        <literal>short[]</literal>,
        <literal>int[]</literal>,
        <literal>long[]</literal>,
        <literal>float[]</literal>,
        <literal>double[]</literal>,
        <literal>String</literal>,


        Hazelcast also optimizes the following types, however you can override them by creating a custom serializer
        and registering it.
        See
        <link xlink:href="#CustomSerialization">Custom Serialization</link>
        for more information.

        <itemizedlist>
            <listitem>Date</listitem>
            <listitem>BigInteger</listitem>
            <listitem>BigDecimal</listitem>
            <listitem>Class</listitem>
            <listitem>Externalizable</listitem>
            <listitem>Serializable</listitem>
        </itemizedlist>

        Not that if the object is not instance of any explicit type, Hazelcast uses Java Serialization
        for Serializable and Externalizable objects. The default behaviour can be changed using a
        <link xlink:href="#CustomSerialization">Custom Serialization</link>.

    </para>
</para>
